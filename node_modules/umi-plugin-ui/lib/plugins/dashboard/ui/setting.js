"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _antd = require("antd");

var _context2 = _interopRequireDefault(require("./context"));

var _index = require("./index");

var _settingModule = _interopRequireDefault(require("./setting.module.less"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var Paragraph = _antd.Typography.Paragraph;

var Setting = function Setting(props, ref) {
  var _React$useContext = React.useContext(_context2.default),
      api = _React$useContext.api,
      dbPath = _React$useContext.dbPath,
      cards = _React$useContext.cards,
      setCardSettings = _React$useContext.setCardSettings;

  var _ref$current = ref.current,
      visible = _ref$current.visible,
      closeDrawer = _ref$current.closeDrawer,
      openDrawer = _ref$current.openDrawer,
      className = _ref$current.className,
      restConfig = _objectWithoutProperties(_ref$current, ["visible", "closeDrawer", "openDrawer", "className"]);

  var handleOnChange = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(key, checked) {
      var result;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return api.callRemote({
                type: 'org.umi.dashboard.card.list.change',
                payload: {
                  dbPath: dbPath,
                  key: key,
                  enable: !!checked
                }
              });

            case 2:
              result = _context.sent;
              api.event.emit(_index.MESSAGES.CHANGE_CARDS, result);
              setCardSettings(result);

            case 5:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function handleOnChange(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();

  var drawerCls = (0, _classnames.default)(className, _settingModule.default.drawer);
  return /*#__PURE__*/React.createElement(_antd.Drawer, _extends({
    className: drawerCls,
    visible: visible,
    onClose: closeDrawer,
    title: api.intl({
      id: 'org.umi.ui.dashboard.settings.title'
    })
  }, restConfig), /*#__PURE__*/React.createElement(_antd.List, {
    dataSource: cards || [],
    loading: !cards,
    className: _settingModule.default.list,
    bordered: false,
    split: false,
    renderItem: function renderItem(item) {
      return /*#__PURE__*/React.createElement(_antd.List.Item, {
        key: item.key,
        className: _settingModule.default.item,
        extra: /*#__PURE__*/React.createElement(_antd.Switch, {
          style: {
            marginLeft: 8
          },
          size: "small",
          onChange: function onChange(checked) {
            return handleOnChange(item.key, checked);
          },
          defaultChecked: !!item.enable
        })
      }, /*#__PURE__*/React.createElement(_antd.List.Item.Meta, {
        avatar: (0, _index.renderAvatar)(item, api.mini),
        title: item.title,
        description: /*#__PURE__*/React.createElement(Paragraph, {
          ellipsis: true
        }, item.description)
      }));
    }
  }));
};

var _default = React.forwardRef(Setting);

exports.default = _default;