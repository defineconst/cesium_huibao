"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _antd = require("antd");

var _icons = require("@ant-design/icons");

var _context = _interopRequireDefault(require("./context"));

var _setting = _interopRequireDefault(require("./setting"));

var _useDrawer = _interopRequireDefault(require("./hooks/useDrawer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var ConfigAction = function ConfigAction(props) {
  var _React$useContext = React.useContext(_context.default),
      api = _React$useContext.api;

  var _analyze = api._analyze;
  var drawerRef = (0, _useDrawer.default)({
    width: 308,
    bodyStyle: {
      padding: '12px 24px'
    }
  });

  var handleSetting = function handleSetting() {
    drawerRef.current.openDrawer(); // open setting log

    var gtag = _analyze.gtag;
    gtag('event', 'click_actions', {
      event_category: 'dashboard',
      event_label: '配置'
    });
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_antd.Button, {
    size: api.mini ? 'small' : 'default',
    onClick: handleSetting
  }, /*#__PURE__*/React.createElement(_icons.SettingOutlined, null)), /*#__PURE__*/React.createElement(_setting.default, {
    ref: drawerRef
  }));
};

var _default = ConfigAction;
exports.default = _default;