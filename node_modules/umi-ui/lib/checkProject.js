"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getConfigFile = getConfigFile;
exports.isUmiProject = isUmiProject;
exports.isUsingBigfish = isUsingBigfish;
exports.isUsingUmi = isUsingUmi;
exports.isDepLost = isDepLost;
exports.isPluginLost = isPluginLost;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _fs() {
  const data = require("fs");

  _fs = function _fs() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

const configFiles = ['.umirc.js', '.umirc.ts', 'config/config.js', 'config/config.ts'];

function getConfigFile(targetDir) {
  var _iterator = _createForOfIteratorHelper(configFiles),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      const f = _step.value;
      const af = (0, _path().join)(targetDir, f);

      if ((0, _fs().existsSync)(af)) {
        return af;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}

function isUmiProject(targetDir) {
  const configFile = getConfigFile(targetDir);
  if (configFile) return true;

  function existFile(f) {
    return (0, _fs().existsSync)((0, _path().join)(targetDir, f));
  }

  if (existFile('src') || existFile('pages') || existFile('page')) {
    return true;
  }
}

function isUsingBigfish(targetDir) {
  const pkgPath = (0, _path().join)(targetDir, 'package.json');
  if (!(0, _fs().existsSync)(pkgPath)) return false;
  const pkgStr = (0, _fs().readFileSync)(pkgPath, 'utf-8');
  return pkgStr.includes('"@alipay/bigfish"');
}

function isUsingUmi(targetDir) {
  const pkgPath = (0, _path().join)(targetDir, 'package.json');
  if (!(0, _fs().existsSync)(pkgPath)) return false;
  const pkgStr = (0, _fs().readFileSync)(pkgPath, 'utf-8');
  return pkgStr.includes('"umi"') && !isUsingBigfish(targetDir);
}

function isDepLost(e) {
  const m = e.message.match(/Cannot find module '(.+)'/);
  return m && !m[1].startsWith('.');
}

function isPluginLost(e) {
  return e.message.match(/Plugin .+? can't be resolved/);
}