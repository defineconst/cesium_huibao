"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.executeCommand = executeCommand;
exports.installDeps = installDeps;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _crossSpawn() {
  const data = _interopRequireDefault(require("cross-spawn"));

  _crossSpawn = function _crossSpawn() {
    return data;
  };

  return data;
}

function _binaryMirrorConfig() {
  const data = _interopRequireDefault(require("binary-mirror-config"));

  _binaryMirrorConfig = function _binaryMirrorConfig() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const getSpeedUpEnv = () => {
  return _binaryMirrorConfig().default.china.ENVS;
};

function executeCommand(_x, _x2, _x3, _x4) {
  return _executeCommand.apply(this, arguments);
}

function _executeCommand() {
  _executeCommand = _asyncToGenerator(function* (npmClient, args, targetDir, opts) {
    const extraEnv = getSpeedUpEnv();
    return new Promise((resolve, reject) => {
      // 详细日志
      if (['tnpm', 'npm', 'cnpm'].includes(npmClient)) {
        args.push('-d');
      }

      const child = (0, _crossSpawn().default)(npmClient, args, {
        cwd: targetDir,
        env: _objectSpread({}, process.env, {}, extraEnv, {}, opts && opts.unsafePerm ? {
          npm_config_unsafe_perm: true
        } : {})
      });
      child.stdout.on('data', buffer => {
        if (process.env.DEBUG) {
          process.stdout.write(buffer);
        }

        if (opts.onData) opts.onData(buffer.toString());
      });
      child.stderr.on('data', buffer => {
        if (process.env.DEBUG) {
          process.stderr.write(buffer);
        }

        if (opts.onData) opts.onData(buffer.toString());
      });
      child.on('close', code => {
        if (code !== 0) {
          reject(new Error(`command failed: ${npmClient} ${args.join(' ')}`));
          return;
        }

        resolve();
      });
    });
  });
  return _executeCommand.apply(this, arguments);
}

function installDeps(_x5, _x6, _x7) {
  return _installDeps.apply(this, arguments);
}

function _installDeps() {
  _installDeps = _asyncToGenerator(function* (npmClient, targetDir, opts) {
    let args = [];

    if (['yarn', 'tyarn', 'ayarn'].includes(npmClient)) {
      args = [];
    } else if (['tnpm', 'npm', 'cnpm', 'pnpm'].includes(npmClient)) {
      args = ['install'];
    }

    yield executeCommand(npmClient, args, targetDir, opts);
  });
  return _installDeps.apply(this, arguments);
}