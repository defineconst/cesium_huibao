"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getLangStr(obj, lang) {
  if (typeof obj === 'string') {
    return obj;
  } else if (typeof obj === 'object') {
    return obj[lang] || obj['en-US'];
  } else {
    throw new Error(`Unsupport type ${typeof obj}`);
  }
}

function normalizeAction(action, lang) {
  return _objectSpread({}, action, {
    title: getLangStr(action.title, lang)
  });
}

class ActiveProjectError extends Error {
  constructor(opts) {
    const title = opts.title,
          message = opts.message,
          stack = opts.stack,
          actions = opts.actions,
          lang = opts.lang,
          exception = opts.exception;
    super(getLangStr(message || '', lang));
    this.actions = void 0;
    this.exception = void 0;
    this.title = void 0;
    if (title) this.title = getLangStr(title, lang);
    if (stack) this.stack = stack;

    if (exception) {
      this.exception = exception;
    }

    if (actions) this.actions = actions.map(action => {
      return normalizeAction(action, lang);
    });
  }

}

exports.default = ActiveProjectError;