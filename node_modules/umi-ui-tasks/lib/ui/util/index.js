"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  isCaredEvent: true,
  getNoticeMessage: true
};
exports.getNoticeMessage = getNoticeMessage;
exports.isCaredEvent = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

var _enums = require("../../server/core/enums");

var _initApiToGlobal = require("./initApiToGlobal");

Object.keys(_initApiToGlobal).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _initApiToGlobal[key];
    }
  });
});

var _task = require("./task");

Object.keys(_task).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _task[key];
    }
  });
});

var _terminal = require("./terminal");

Object.keys(_terminal).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _terminal[key];
    }
  });
});

var _analyze = require("./analyze");

Object.keys(_analyze).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function get() {
      return _analyze[key];
    }
  });
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const isCaredEvent = (taskType, caredTaskType) => {
  if (!taskType || taskType !== caredTaskType) {
    return false;
  }

  return true;
};

exports.isCaredEvent = isCaredEvent;
const NOTICE_MESSAGE_MAP = {
  [_enums.TaskType.BUILD]: {
    [_enums.TaskState.SUCCESS]: {
      title: 'org.umi.ui.tasks.notify.build.success.title',
      message: 'org.umi.ui.tasks.notify.build.success.message'
    },
    [_enums.TaskState.FAIL]: {
      title: 'org.umi.ui.tasks.notify.build.fail.title',
      message: 'org.umi.ui.tasks.notify.build.fail.message'
    }
  },
  [_enums.TaskType.DEV]: {
    [_enums.TaskState.SUCCESS]: {
      title: 'org.umi.ui.tasks.notify.dev.success.title',
      message: 'org.umi.ui.tasks.notify.dev.success.message'
    },
    [_enums.TaskState.FAIL]: {
      title: 'org.umi.ui.tasks.notify.dev.fail.title',
      message: 'org.umi.ui.tasks.notify.dev.fail.message'
    }
  },
  [_enums.TaskType.TEST]: {
    [_enums.TaskState.SUCCESS]: {
      title: 'org.umi.ui.tasks.notify.test.success.title',
      message: 'org.umi.ui.tasks.notify.test.success.message'
    },
    [_enums.TaskState.FAIL]: {
      title: 'org.umi.ui.tasks.notify.test.fail.title',
      message: 'org.umi.ui.tasks.notify.test.fail.message'
    }
  },
  [_enums.TaskType.LINT]: {
    [_enums.TaskState.SUCCESS]: {
      title: 'org.umi.ui.tasks.notify.lint.success.title',
      message: 'org.umi.ui.tasks.notify.lint.success.message'
    },
    [_enums.TaskState.FAIL]: {
      title: 'org.umi.ui.tasks.notify.lint.fail.title',
      message: 'org.umi.ui.tasks.notify.lint.fail.message'
    }
  },
  [_enums.TaskType.INSTALL]: {
    [_enums.TaskState.SUCCESS]: {
      title: 'org.umi.ui.tasks.notify.install.success.title',
      message: 'org.umi.ui.tasks.notify.install.success.message'
    },
    [_enums.TaskState.FAIL]: {
      title: 'org.umi.ui.tasks.notify.install.fail.title',
      message: 'org.umi.ui.tasks.notify.install.fail.message'
    }
  }
};

function getNoticeMessage(taskType, state) {
  return _objectSpread({
    type: state === _enums.TaskState.SUCCESS ? 'success' : 'error'
  }, NOTICE_MESSAGE_MAP[taskType][state]);
}