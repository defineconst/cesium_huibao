"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearLog = exports.cancel = exports.exec = exports.getTaskDetail = exports.cancelTask = exports.runTask = exports.TriggerState = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

let TriggerState;
exports.TriggerState = TriggerState;

(function (TriggerState) {
  TriggerState["SUCCESS"] = "SUCCESS";
  TriggerState["FAIL"] = "FAIL";
})(TriggerState || (exports.TriggerState = TriggerState = {}));

const runTask = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (taskType, args = {}, env) {
    let result = {};
    let errMsg = '';
    let triggerState = TriggerState.SUCCESS;

    try {
      result = yield (0, _index.callRemote)({
        type: 'tasks/run',
        payload: {
          type: taskType,
          args,
          env: env ? env : {}
        }
      });
    } catch (e) {
      errMsg = e.message;
      triggerState = TriggerState.FAIL;
    }

    return {
      triggerState,
      result,
      errMsg
    };
  });

  return function runTask(_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.runTask = runTask;

const cancelTask = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator(function* (taskType) {
    let result = {};
    let errMsg = '';
    let triggerState = TriggerState.SUCCESS;

    try {
      result = yield (0, _index.callRemote)({
        type: 'tasks/cancel',
        payload: {
          type: taskType
        }
      });
    } catch (e) {
      errMsg = e.stack;
      triggerState = TriggerState.FAIL;
    }

    return {
      triggerState,
      result,
      errMsg
    };
  });

  return function cancelTask(_x2) {
    return _ref2.apply(this, arguments);
  };
}();

exports.cancelTask = cancelTask;

const getTaskDetail = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator(function* (taskType, log = true, dbPath = '') {
    return yield (0, _index.callRemote)({
      type: 'tasks/detail',
      payload: {
        type: taskType,
        log,
        dbPath
      }
    });
  });

  return function getTaskDetail(_x3) {
    return _ref3.apply(this, arguments);
  };
}();

exports.getTaskDetail = getTaskDetail;

const exec = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator(function* (taskType, env) {
    const _yield$runTask = yield runTask(taskType, env),
          runTaskTriggerState = _yield$runTask.triggerState,
          errMsg = _yield$runTask.errMsg;

    if (runTaskTriggerState === TriggerState.FAIL) {
      return {
        triggerState: TriggerState.FAIL,
        errMsg,
        result: null
      };
    }

    return {
      triggerState: TriggerState.SUCCESS,
      errMsg: ''
    };
  });

  return function exec(_x4, _x5) {
    return _ref4.apply(this, arguments);
  };
}();

exports.exec = exec;

const cancel = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator(function* (taskType) {
    const _yield$cancelTask = yield cancelTask(taskType),
          runTaskTriggerState = _yield$cancelTask.triggerState,
          errMsg = _yield$cancelTask.errMsg;

    if (runTaskTriggerState === TriggerState.FAIL) {
      return {
        triggerState: TriggerState.FAIL,
        errMsg,
        result: null
      };
    }

    return {
      triggerState: TriggerState.SUCCESS,
      errMsg: ''
    };
  });

  return function cancel(_x6) {
    return _ref5.apply(this, arguments);
  };
}();

exports.cancel = cancel;

const clearLog = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator(function* (taskType) {
    yield (0, _index.callRemote)({
      type: 'tasks/clearLog',
      payload: {
        type: taskType
      }
    });
  });

  return function clearLog(_x7) {
    return _ref6.apply(this, arguments);
  };
}();

exports.clearLog = clearLog;