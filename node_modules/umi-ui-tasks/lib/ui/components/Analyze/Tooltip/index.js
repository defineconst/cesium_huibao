"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _indexModule = _interopRequireDefault(require("./index.module.less"));

var _classnames = _interopRequireDefault(require("classnames"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var Tooltip = /*#__PURE__*/function (_React$Component) {
  _inherits(Tooltip, _React$Component);

  var _super = _createSuper(Tooltip);

  function Tooltip() {
    var _this;

    _classCallCheck(this, Tooltip);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    _this.node = null;
    _this.mouseCoords = {
      x: 0,
      y: 0
    };
    _this.state = {
      left: 0,
      top: 0
    };

    _this.handleMouseMove = function (event) {
      Object.assign(_this.mouseCoords, {
        x: event.pageX,
        y: event.pageY
      });

      if (_this.props.visible) {
        _this.updatePosition();
      }
    };

    _this.saveNode = function (node) {
      return _this.node = node;
    };

    return _this;
  }

  _createClass(Tooltip, [{
    key: "getStyle",
    value: function getStyle() {
      return {
        left: this.state.left,
        top: this.state.top
      };
    }
  }, {
    key: "updatePosition",
    value: function updatePosition() {
      if (!this.props.visible) return;
      var pos = {
        left: this.mouseCoords.x + Tooltip.marginX,
        top: this.mouseCoords.y + Tooltip.marginY
      };
      var boundingRect = this.node.getBoundingClientRect();

      if (pos.left + boundingRect.width > window.innerWidth) {
        // Shifting horizontally
        pos.left = window.innerWidth - boundingRect.width;
      }

      if (pos.top + boundingRect.height > window.innerHeight) {
        // Flipping vertically
        pos.top = this.mouseCoords.y - Tooltip.marginY - boundingRect.height;
      }

      this.setState(pos);
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      document.addEventListener('mousemove', this.handleMouseMove, true);
    }
  }, {
    key: "shouldComponentUpdate",
    value: function shouldComponentUpdate(nextProps) {
      return this.props.visible || nextProps.visible;
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      document.removeEventListener('mousemove', this.handleMouseMove, true);
    }
  }, {
    key: "render",
    value: function render() {
      var _cls;

      var _this$props = this.props,
          children = _this$props.children,
          visible = _this$props.visible;
      var className = (0, _classnames.default)((_cls = {}, _defineProperty(_cls, _indexModule.default.container, true), _defineProperty(_cls, _indexModule.default.hidden, !visible), _cls));
      return /*#__PURE__*/_react.default.createElement("div", {
        ref: this.saveNode,
        className: className,
        style: this.getStyle()
      }, children);
    }
  }]);

  return Tooltip;
}(_react.default.Component);

exports.default = Tooltip;
Tooltip.marginX = 10;
Tooltip.marginY = 10;