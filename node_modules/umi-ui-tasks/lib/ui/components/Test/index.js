"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _antd = require("antd");

var _icons = require("@ant-design/icons");

var _uiModule = _interopRequireDefault(require("../../ui.module.less"));

var _enums = require("../../../server/core/enums");

var _util = require("../../util");

var _hooks = require("../../hooks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var TestComponent = function TestComponent(_ref) {
  var taskType = _ref.taskType,
      namespace = _ref.namespace,
      api = _ref.api,
      dispatch = _ref.dispatch,
      _ref$detail = _ref.detail,
      detail = _ref$detail === void 0 ? {} : _ref$detail,
      Terminal = _ref.Terminal;
  var intl = api.intl;

  var _useState = (0, _react.useState)(''),
      _useState2 = _slicedToArray(_useState, 2),
      log = _useState2[0],
      setLog = _useState2[1];

  var _useInit = (0, _hooks.useInit)(detail),
      _useInit2 = _slicedToArray(_useInit, 1),
      init = _useInit2[0]; // UnMount: reset form


  (0, _react.useEffect)(function () {
    if (!init) {
      return function () {};
    }

    dispatch({
      type: "".concat(namespace, "/getTaskDetail"),
      payload: {
        taskType: taskType,
        callback: function callback(_ref2) {
          var log = _ref2.log;
          setLog(log);
        }
      }
    });
    return function () {
      var terminal = (0, _util.getTerminalRefIns)(taskType, api.currentProject.key);

      if (terminal) {
        terminal.clear();
      }
    };
  }, [init]);

  function test() {
    return _test.apply(this, arguments);
  }

  function _test() {
    _test = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              dispatch({
                type: "".concat(namespace, "/exec"),
                payload: {
                  taskType: taskType
                }
              });

            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return _test.apply(this, arguments);
  }

  function cancelTest() {
    return _cancelTest.apply(this, arguments);
  }

  function _cancelTest() {
    _cancelTest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              dispatch({
                type: "".concat(namespace, "/exec"),
                payload: {
                  taskType: taskType
                }
              });

            case 1:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));
    return _cancelTest.apply(this, arguments);
  }

  var isTaskRunning = detail && detail.state === _enums.TaskState.ING;
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("h1", {
    className: _uiModule.default.title
  }, intl({
    id: 'org.umi.ui.tasks.test'
  })), /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_antd.Row, null, /*#__PURE__*/_react.default.createElement(_antd.Col, {
    span: 24,
    className: _uiModule.default.buttonGroup
  }, /*#__PURE__*/_react.default.createElement(_antd.Button, {
    size: api.mini ? 'small' : 'default',
    type: "primary",
    onClick: isTaskRunning ? cancelTest : test
  }, isTaskRunning ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_icons.PauseOutlined, null), /*#__PURE__*/_react.default.createElement("span", {
    className: _uiModule.default.runningText
  }, ' ', intl({
    id: 'org.umi.ui.tasks.test.cancel'
  }))) : /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_icons.CaretRightOutlined, null), /*#__PURE__*/_react.default.createElement("span", {
    className: _uiModule.default.runningText
  }, ' ', intl({
    id: 'org.umi.ui.tasks.test.start'
  })))))), /*#__PURE__*/_react.default.createElement("div", {
    className: _uiModule.default.logContainer
  }, /*#__PURE__*/_react.default.createElement(Terminal, {
    defaultValue: log,
    onInit: function onInit(ins) {
      if (ins) {
        (0, _util.setTerminalRefIns)(taskType, api.currentProject.key, ins);
      }
    }
  }))));
};

var _default = TestComponent;
exports.default = _default;