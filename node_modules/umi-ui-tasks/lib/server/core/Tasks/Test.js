"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TestTask = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

var _Base = require("./Base");

var _enums = require("../enums");

var _util = require("../../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

class TestTask extends _Base.BaseTask {
  constructor(opts) {
    super(opts);
    this.type = _enums.TaskType.TEST;
  }

  run(args = {}, env = {}) {
    var _superprop_getRun = () => super.run,
        _this = this;

    return _asyncToGenerator(function* () {
      yield _superprop_getRun().call(_this);

      const _this$getScript = _this.getScript(),
            script = _this$getScript.script,
            scriptEnvs = _this$getScript.envs;

      _this.proc = (0, _util.runCommand)(script, {
        cwd: _this.cwd,
        env: _objectSpread({}, env, {}, scriptEnvs) // 前端传入的 env

      });

      _this.handleChildProcess(_this.proc);
    })();
  }

  getScript() {
    const _parseScripts = (0, _util.parseScripts)({
      pkgPath: this.pkgPath,
      key: 'test'
    }),
          succes = _parseScripts.succes,
          exist = _parseScripts.exist,
          errMsg = _parseScripts.errMsg,
          envs = _parseScripts.envs,
          bin = _parseScripts.bin;

    if (!exist) {
      return {
        script: this.isBigfishProject ? 'bigfish test' : 'umi test',
        envs: []
      };
    }

    if (!succes) {
      this.error(errMsg);
    }

    return {
      script: `${bin} test`,
      envs
    };
  }

}

exports.TestTask = TestTask;