"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DevTask = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

var _Base = require("./Base");

var _enums = require("../enums");

var _util = require("../../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

class DevTask extends _Base.BaseTask {
  // 是否已经启动
  // local url
  // lan url
  // 启动中也会有 hasError 的情况
  // analyze port
  constructor(opts) {
    super(opts);
    this.started = false;
    this.localUrl = '';
    this.lanUrl = '';
    this.hasError = false;
    this.analyzePort = void 0;
    this.type = _enums.TaskType.DEV;
  }

  run(_, env = {}) {
    var _superprop_getRun = () => super.run,
        _this = this;

    return _asyncToGenerator(function* () {
      yield _superprop_getRun().call(_this);

      const _this$getScript = _this.getScript(),
            script = _this$getScript.script,
            scriptEnvs = _this$getScript.envs;

      const analyzeEnv = yield (0, _util.getDevAnalyzeEnv)();
      _this.analyzePort = analyzeEnv.ANALYZE_PORT;
      _this.proc = yield (0, _util.runCommand)(script, {
        cwd: _this.cwd,
        env: _objectSpread({}, env, {}, analyzeEnv, {}, scriptEnvs)
      }, true);

      _this.handleChildProcess(_this.proc);
    })();
  }

  cancel() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      _this2.reset();

      const proc = _this2.proc;

      if (!proc) {
        return;
      } // 子任务执行结束


      if ([_enums.TaskState.FAIL].indexOf(_this2.state) > -1) {
        return;
      }

      _this2.state = _enums.TaskState.INIT;
      proc.kill('SIGTERM');
    })();
  }

  getDetail() {
    var _superprop_getGetDetail = () => super.getDetail,
        _this3 = this;

    return _asyncToGenerator(function* () {
      return _objectSpread({}, (yield _superprop_getGetDetail().call(_this3)), {
        started: _this3.started,
        localUrl: _this3.localUrl,
        lanUrl: _this3.lanUrl,
        progress: _this3.progress,
        hasError: _this3.hasError,
        analyzePort: _this3.state === _enums.TaskState.SUCCESS ? _this3.analyzePort : null
      });
    })();
  }

  handleChildProcess(proc) {
    var _this4 = this;

    proc.on('message', msg => {
      this.updateState(msg);
    });
    proc.stdout.setEncoding('utf8');
    proc.stdout.on('data', log => {
      this.emit(_enums.TaskEventType.STD_OUT_DATA, log);
    });
    proc.stderr.setEncoding('utf8');
    proc.stderr.on('data', log => {
      this.emit(_enums.TaskEventType.STD_ERR_DATA, log);
    });
    proc.on('exit', (code, signal) => {
      this.state = code === 1 ? _enums.TaskState.FAIL : _enums.TaskState.INIT;

      _asyncToGenerator(function* () {
        _this4.emit(_enums.TaskEventType.STATE_EVENT, (yield _this4.getDetail()));
      })();
    });
    process.on('exit', () => {
      proc.kill('SIGTERM');
    });
  }

  updateProgress(msg) {
    if (this.hasError) {
      this.hasError = false;
    }

    super.updateProgress(msg);
  }

  getScript() {
    let res = (0, _util.parseScripts)({
      pkgPath: this.pkgPath,
      key: 'start'
    });

    if (!res.exist) {
      res = (0, _util.parseScripts)({
        pkgPath: this.pkgPath,
        key: 'dev'
      });
    }

    const _res = res,
          succes = _res.succes,
          exist = _res.exist,
          errMsg = _res.errMsg,
          envs = _res.envs,
          bin = _res.bin,
          args = _res.args; // No specified dev or start script

    if (!exist) {
      return {
        script: this.isBigfishProject ? 'bigfish dev' : 'umi dev',
        envs: []
      };
    } // Parse script error


    if (!succes) {
      this.error(errMsg);
    }

    return {
      script: `${bin} ${args.join(' ')}`,
      envs
    };
  }

  updateState(msg) {
    if (this.started) {
      return;
    }

    const type = msg.type;

    switch (type) {
      case 'DONE':
        this.success(msg);
        break;

      case 'STARTING':
        this.updateProgress(msg);
        break;

      case 'ERROR':
        this.updateError();
        break;

      default:
    }
  }

  updateError() {
    var _this5 = this;

    this.hasError = true;

    _asyncToGenerator(function* () {
      _this5.emit(_enums.TaskEventType.STATE_EVENT, (yield _this5.getDetail()));
    })();
  }

  success(msg) {
    var _this6 = this;

    const urls = msg.urls;
    this.hasError = false;
    this.started = true;
    this.localUrl = urls.rawLocal;
    this.lanUrl = urls.rawLanUrl;
    this.state = _enums.TaskState.SUCCESS;

    _asyncToGenerator(function* () {
      _this6.emit(_enums.TaskEventType.STATE_EVENT, (yield _this6.getDetail()));
    })();
  }

  reset() {
    this.started = false;
    this.localUrl = '';
    this.lanUrl = '';
    this.hasError = false;
    this.analyzePort = null;
    this.progress = 0;
  }

}

exports.DevTask = DevTask;