"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseTask = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _events() {
  const data = require("events");

  _events = function _events() {
    return data;
  };

  return data;
}

var _enums = require("../enums");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * BaseTask
 *  1. 状态管理
 *  2. 日志管理
 *  3. 进程管理
 */
class BaseTask extends _events().EventEmitter {
  // 日志
  // 当前进程
  // 进度，只有 dev 和 build 需要
  constructor({
    cwd,
    key
  }) {
    super();
    this.cwd = '';
    this.key = '';
    this.state = _enums.TaskState.INIT;
    this.type = void 0;
    this.log = '';
    this.proc = void 0;
    this.subscribeInitFlag = false;
    this.isCancel = false;
    this.progress = 0;
    this.pkgPath = '';
    this.isBigfishProject = false;
    this.cwd = cwd;
    this.key = key;
    this.pkgPath = (0, _path().join)(cwd, 'package.json');
    this.isBigfishProject = !!process.env.BIGFISH_COMPAT;
  }

  init(collector) {
    var _this = this;

    return _asyncToGenerator(function* () {
      if (_this.subscribeInitFlag) {
        return;
      }

      _this.subscribeInitFlag = true;

      _this.on(_enums.TaskEventType.STD_OUT_DATA, data => {
        _this.log = `${_this.log}${data}`;
        collector({
          cwd: _this.cwd,
          type: 'org.umi.task.log',
          payload: {
            key: _this.key,
            taskType: _this.type,
            log: data
          }
        });
      });

      _this.on(_enums.TaskEventType.STD_ERR_DATA, data => {
        _this.log = `${_this.log}${data}`;
        collector({
          cwd: _this.cwd,
          type: 'org.umi.task.log',
          payload: {
            taskType: _this.type,
            key: _this.key,
            cwd: _this.cwd,
            log: data
          }
        });
      });

      _this.on(_enums.TaskEventType.STATE_EVENT, detail => {
        _asyncToGenerator(function* () {
          collector({
            cwd: _this.cwd,
            type: 'org.umi.task.state',
            payload: {
              cwd: _this.cwd,
              taskType: _this.type,
              detail: detail || (yield _this.getDetail())
            }
          });
        })();
      });
    })();
  }

  clearLog() {
    this.log = '';
  }

  getLog() {
    return this.log;
  }

  run(args = {}, envs = {}) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      _this2.state = _enums.TaskState.ING;

      _this2.emit(_enums.TaskEventType.STATE_EVENT, (yield _this2.getDetail()));
    })();
  }

  cancel() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const proc = _this3.proc;

      if (!proc) {
        return;
      } // 子任务执行结束


      if ([_enums.TaskState.FAIL, _enums.TaskState.SUCCESS].indexOf(_this3.state) > -1) {
        return;
      }

      _this3.state = _enums.TaskState.INIT;
      _this3.isCancel = true;
      proc.kill('SIGTERM');
    })();
  }

  getDetail(_) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      return {
        state: _this4.state,
        type: _this4.type,
        progress: _this4.progress
      };
    })();
  }

  handleChildProcess(proc) {
    var _this5 = this;

    proc.stdout.setEncoding('utf8');
    proc.stdout.on('data', log => {
      this.emit(_enums.TaskEventType.STD_OUT_DATA, log);
    });
    proc.stderr.setEncoding('utf8');
    proc.stderr.on('data', log => {
      this.emit(_enums.TaskEventType.STD_ERR_DATA, log);
    });
    proc.on('exit', (code, signal) => {
      _asyncToGenerator(function* () {
        if (signal === 'SIGINT') {
          // 用户取消任务
          _this5.state = _enums.TaskState.INIT;
        } else {
          if (_this5.isCancel) {
            _this5.state = _enums.TaskState.INIT;
            _this5.isCancel = false;
          } else {
            _this5.state = code !== 0 ? _enums.TaskState.FAIL : _enums.TaskState.SUCCESS;
          }
        } // 触发事件


        _this5.emit(_enums.TaskEventType.STATE_EVENT, (yield _this5.getDetail()));
      })();
    });
    process.on('exit', () => {
      proc.kill('SIGTERM');
    });
  }

  updateProgress(msg) {
    var _this6 = this;

    if (!msg.progress) {
      return;
    }

    const percentage = msg.progress.percentage;
    const current = Number(Number(percentage).toFixed(2));

    if (current <= this.progress) {
      return;
    }

    this.progress = current;

    _asyncToGenerator(function* () {
      _this6.emit(_enums.TaskEventType.STATE_EVENT, (yield _this6.getDetail()));
    })();
  }

  error(msg) {
    const err = new Error(msg);
    err.name = 'BaseTaskError';
    throw err;
  }

}

exports.BaseTask = BaseTask;