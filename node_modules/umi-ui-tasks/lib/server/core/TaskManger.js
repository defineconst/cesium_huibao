"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

var _Tasks = require("./Tasks");

var _enums = require("./enums");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * Tasks 管理，根据 cwd 做区分
 */
class TaskManager {
  constructor() {
    this.api = void 0;
    this.currentCwd = '';
    this.tasks = {};
    this.send = void 0;
  }

  // 客户端消息触发器
  init(cwd, send, key) {
    var _this = this;

    return _asyncToGenerator(function* () {
      _this.currentCwd = cwd;
      _this.send = send;

      if (_this.tasks[cwd]) {
        return;
      }

      const opts = {
        cwd,
        key
      };
      _this.tasks[cwd] = {
        [_enums.TaskType.BUILD]: new _Tasks.BuildTask(opts),
        [_enums.TaskType.DEV]: new _Tasks.DevTask(opts),
        [_enums.TaskType.TEST]: new _Tasks.TestTask(opts),
        [_enums.TaskType.LINT]: new _Tasks.LintTask(opts),
        [_enums.TaskType.INSTALL]: new _Tasks.InstallTask(opts)
      };
      const projectTasks = _this.tasks[cwd];
      Object.keys(_this.tasks[cwd]).forEach( /*#__PURE__*/function () {
        var _ref = _asyncToGenerator(function* (taskType) {
          const task = projectTasks[taskType];
          yield task.init(_this.collector(_this.currentCwd, _this.send));
        });

        return function (_x) {
          return _ref.apply(this, arguments);
        };
      }());
    })();
  }

  getTask(type) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      return new Promise(resolve => {
        if (_this2.currentCwd) {
          const currentProjectTasks = _this2.tasks[_this2.currentCwd];
          resolve(currentProjectTasks[type]);
          return;
        } // TODO: 这儿写的不是很好


        setTimeout(() => {
          const currentProjectTasks = _this2.tasks[_this2.currentCwd];
          resolve(currentProjectTasks[type]);
        }, 1000);
      });
    })();
  }
  /**
   * 获取全部 task 的状态
   */


  getTasksState() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      const res = {};
      const currentProjectTasks = _this3.tasks[_this3.currentCwd];

      for (var _i = 0, _Object$keys = Object.keys(currentProjectTasks); _i < _Object$keys.length; _i++) {
        const type = _Object$keys[_i];
        res[type] = yield currentProjectTasks[type].getDetail();
      }

      return res;
    })();
  }

  isDevServerAlive() {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      if (!_this4.currentCwd) {
        return false;
      }

      const currentProjectTasks = _this4.tasks[_this4.currentCwd];
      const devTask = currentProjectTasks && currentProjectTasks[_enums.TaskType.DEV];
      return devTask && devTask.state === _enums.TaskState.SUCCESS;
    })();
  }

  collector(currentCwd, send) {
    return (_ref2) => {
      let cwd = _ref2.cwd,
          otherData = _objectWithoutProperties(_ref2, ["cwd"]);

      if (currentCwd !== cwd) {
        return;
      }

      if (!send) {
        return;
      }

      send(otherData);
    };
  }

}

var _default = TaskManager;
exports.default = _default;