"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

var _TaskManger = _interopRequireDefault(require("./core/TaskManger"));

var _util = require("./util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const taskManger = new _TaskManger.default();

var _default = api => {
  api.onUISocket(({
    action: {
      type,
      payload
    },
    send,
    log
  }) => {
    switch (type) {
      case 'plugin/init':
        _asyncToGenerator(function* () {
          yield taskManger.init(api.cwd, send, payload.key);
          const states = yield taskManger.getTasksState();
          send({
            type: `${type}/success`,
            payload: {
              states
            }
          });
        })();

        break;

      case 'tasks':
        _asyncToGenerator(function* () {
          send({
            type: `${type}/success`,
            payload: yield taskManger.getTasksState()
          });
        })();

        break;

      case 'tasks/detail':
        // 初始化操作
        _asyncToGenerator(function* () {
          const task = yield taskManger.getTask(payload.type);
          const detail = yield task.getDetail(payload.dbPath);
          send({
            type: 'tasks/detail/success',
            payload: _objectSpread({}, detail, {
              log: payload.log ? task.getLog() : null,
              currentCwd: taskManger.currentCwd
            })
          });
        })();

        break;

      case 'tasks/run':
        _asyncToGenerator(function* () {
          log('info', `Run task: ${payload.type} `);
          const task = yield taskManger.getTask(payload.type);
          yield task.run(payload.args, (0, _util.formatEnv)(payload.env));
          send({
            type: 'tasks/run/success',
            payload: {
              pid: task.proc.pid
            }
          });
        })();

        break;

      case 'tasks/cancel':
        _asyncToGenerator(function* () {
          log('info', `Cancel task: ${payload.type} `);
          const task = yield taskManger.getTask(payload.type);
          yield task.cancel();
          send({
            type: 'tasks/cancel/success',
            payload: {
              pid: task.proc.pid
            }
          });
        })();

        break;

      case 'tasks/clearLog':
        _asyncToGenerator(function* () {
          const task = yield taskManger.getTask(payload.type);
          task.clearLog();
          send({
            type: 'tasks/clearLog/success',
            payload: {}
          });
        })();

        break;

      case 'tasks/is_dev_server_alive':
        _asyncToGenerator(function* () {
          const alive = yield taskManger.isDevServerAlive();
          send({
            type: 'tasks/is_dev_server_alive/success',
            payload: {
              alive
            }
          });
        })();

        break;

      default:
    }
  });
};

exports.default = _default;