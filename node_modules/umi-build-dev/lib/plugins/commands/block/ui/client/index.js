"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _UIApiContext = _interopRequireDefault(require("./UIApiContext"));

var _BlocksViewer = _interopRequireDefault(require("./BlocksViewer"));

var _TitleTab = _interopRequireDefault(require("./TitleTab"));

var _icon = _interopRequireDefault(require("./icon"));

var _zhCN = _interopRequireDefault(require("./locales/zh-CN"));

var _enUS = _interopRequireDefault(require("./locales/en-US"));

var _model = _interopRequireWildcard(require("./model"));

var _Container = _interopRequireDefault(require("./Container"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var _default = function _default(api) {
  (0, _model.initApiToGlobal)(api);
  var FormattedMessage = api.intl.FormattedMessage;
  api.addLocales({
    'zh-CN': _zhCN.default,
    'en-US': _enUS.default
  });
  var ConnectedBlockViewer = api.connect(function (state) {
    return {
      block: state[_model.namespace],
      loading: state.loading.models[_model.namespace]
    };
  })(_BlocksViewer.default);
  api.addPanel({
    title: 'org.umi.ui.blocks.content.title',
    headerTitle: /*#__PURE__*/_react.default.createElement(_TitleTab.default, null),
    provider: function provider(_ref) {
      var children = _ref.children,
          restProps = _objectWithoutProperties(_ref, ["children"]);

      return /*#__PURE__*/_react.default.createElement(_Container.default.Provider, _extends({
        initialState: {
          api: api
        }
      }, restProps), children);
    },
    path: '/blocks',
    icon: /*#__PURE__*/_react.default.createElement(_icon.default, null),
    actions: [],
    component: function component() {
      return /*#__PURE__*/_react.default.createElement(_UIApiContext.default.Provider, {
        value: {
          api: api
        }
      }, /*#__PURE__*/_react.default.createElement(ConnectedBlockViewer, null));
    }
  }); // 注册 model

  api.registerModel(_model.default);
};

exports.default = _default;