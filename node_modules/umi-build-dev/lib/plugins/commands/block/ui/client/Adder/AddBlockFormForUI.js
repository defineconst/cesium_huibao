"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _antd = require("antd");

var _UIApiContext = _interopRequireDefault(require("../UIApiContext"));

var _InfoToolTip = _interopRequireDefault(require("./InfoToolTip"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var PathLabel = function PathLabel(_ref) {
  var value = _ref.value,
      name = _ref.name;
  return /*#__PURE__*/_react.default.createElement("div", {
    style: {
      display: 'flex',
      marginBottom: 24
    }
  }, "\u533A\u5757\u5C06\u88AB\u5B89\u88C5\u5230", /*#__PURE__*/_react.default.createElement("code", {
    style: {
      backgroundColor: '#3b3b4d',
      margin: '0 8px',
      padding: '0 8px',
      borderRadius: 4
    }
  }, "".concat(value).concat(name ? "/".concat(name) : '').replace(/\//g, '/').replace(/\/\//g, '/')));
};

var AddBlockFormForUI = function AddBlockFormForUI(_ref2) {
  var blockTarget = _ref2.blockTarget,
      form = _ref2.form;

  var _useContext = (0, _react.useContext)(_UIApiContext.default),
      api = _useContext.api;

  var intl = api.intl;

  var _useState = (0, _react.useState)(form.getFieldValue('name')),
      _useState2 = _slicedToArray(_useState, 2),
      varName = _useState2[0],
      setValueName = _useState2[1];

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_antd.Form.Item, {
    noStyle: true,
    name: "path",
    label: /*#__PURE__*/_react.default.createElement(_InfoToolTip.default, {
      title: intl({
        id: 'org.umi.ui.blocks.adder.path'
      }),
      placeholder: intl({
        id: 'org.umi.ui.blocks.adder.path.minitooltip'
      })
    }),
    rules: [{
      required: true,
      message: intl({
        id: 'org.umi.ui.blocks.adder.path.rule'
      })
    }]
  }, /*#__PURE__*/_react.default.createElement(PathLabel, {
    name: varName
  })), /*#__PURE__*/_react.default.createElement(_antd.Form.Item, {
    name: "name",
    label: /*#__PURE__*/_react.default.createElement(_InfoToolTip.default, {
      title: intl({
        id: 'org.umi.ui.blocks.adder.name'
      }),
      placeholder: intl({
        id: 'org.umi.ui.blocks.adder.name.tooltip'
      })
    }),
    rules: [{
      validator: function () {
        var _validator = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(rule, name) {
          var _ref3, exists, blockFileTarget, _ref4, varExists;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  if (name) {
                    _context.next = 2;
                    break;
                  }

                  throw new Error(intl({
                    id: 'org.umi.ui.blocks.adder.name.required'
                  }));

                case 2:
                  if (/^[a-zA-Z$_][a-zA-Z\d_]*$/.test(name)) {
                    _context.next = 4;
                    break;
                  }

                  throw new Error(intl({
                    id: 'org.umi.ui.blocks.adder.name.illegal'
                  }));

                case 4:
                  if (/^(?:[A-Z][a-z\d]+)+$/.test(name)) {
                    _context.next = 6;
                    break;
                  }

                  throw new Error(intl({
                    id: 'org.umi.ui.blocks.adder.name.illegalReact'
                  }));

                case 6:
                  _context.next = 8;
                  return api.callRemote({
                    type: 'org.umi.block.checkExistFilePath',
                    payload: {
                      path: "".concat(blockTarget, "/").concat(name)
                    }
                  });

                case 8:
                  _ref3 = _context.sent;
                  exists = _ref3.exists;

                  if (!exists) {
                    _context.next = 12;
                    break;
                  }

                  throw new Error(intl({
                    id: 'org.umi.ui.blocks.adder.pathexist'
                  }));

                case 12:
                  blockFileTarget = form.getFieldValue('path');
                  _context.next = 15;
                  return api.callRemote({
                    type: 'org.umi.block.checkBindingInFile',
                    payload: {
                      path: blockFileTarget,
                      name: name
                    }
                  });

                case 15:
                  _ref4 = _context.sent;
                  varExists = _ref4.exists;

                  if (!varExists) {
                    _context.next = 19;
                    break;
                  }

                  throw new Error(intl({
                    id: 'org.umi.ui.blocks.adder.varexist'
                  }));

                case 19:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        }));

        function validator(_x, _x2) {
          return _validator.apply(this, arguments);
        }

        return validator;
      }()
    }]
  }, /*#__PURE__*/_react.default.createElement(_antd.Input, {
    placeholder: intl({
      id: 'org.umi.ui.blocks.adder.name.placeholder'
    }),
    onChange: function onChange(e) {
      setValueName(e.target.value);
    }
  })));
};

var _default = AddBlockFormForUI;
exports.default = _default;