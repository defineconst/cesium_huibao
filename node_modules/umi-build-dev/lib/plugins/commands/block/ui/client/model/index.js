"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initApiToGlobal = initApiToGlobal;
exports.default = exports.namespace = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const namespace = 'org.umi.block';
exports.namespace = namespace;
let callRemote;

function initApiToGlobal(api) {
  // eslint-disable-next-line
  callRemote = api.callRemote;
}

var _default = {
  namespace,
  // TODO fill state
  state: {
    blockData: {},
    currentResourceId: null
  },
  effects: {
    // 获取数据
    *fetch({
      payload
    }, {
      call,
      put,
      select
    }) {
      const _yield$select = yield select(state => state[namespace]),
            blockData = _yield$select.blockData,
            currentResourceId = _yield$select.currentResourceId;

      const _payload$resourceId = payload.resourceId,
            resourceId = _payload$resourceId === void 0 ? currentResourceId : _payload$resourceId,
            reload = payload.reload;

      if (blockData[resourceId] && !reload) {
        return blockData[resourceId];
      }

      const _yield$call = yield call(() => {
        return callRemote({
          type: 'org.umi.block.list',
          payload: {
            resourceId,
            force: reload
          }
        });
      }),
            list = _yield$call.data;

      yield put({
        type: 'saveData',
        payload: {
          resourceId,
          list
        }
      });
      return [];
    }

  },
  reducers: {
    saveData({
      blockData
    }, {
      payload
    }) {
      const resourceId = payload.resourceId,
            list = payload.list;
      const newState = {
        blockData: _objectSpread({}, blockData, {
          [resourceId]: list
        }),
        currentResourceId: resourceId
      };
      return newState;
    }

  }
};
exports.default = _default;