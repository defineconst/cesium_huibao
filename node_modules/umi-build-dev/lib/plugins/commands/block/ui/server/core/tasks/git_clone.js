"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const clone = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator(function* (ctx) {
    const logger = ctx.logger,
          execa = ctx.execa;
    const _ref2 = ctx.stages.blockCtx,
          repo = _ref2.repo,
          id = _ref2.id,
          blocksTempPath = _ref2.blocksTempPath,
          repoExists = _ref2.repoExists;

    if (repoExists) {
      return;
    }

    logger.appendLog(`ðŸšš  Start git clone from ${repo}`);
    yield execa('git', ['clone', repo, id, '--recurse-submodules'], {
      cwd: blocksTempPath,
      env: process.env
    });
    logger.appendLog('ðŸŽ‰  Success git clone\n');
  });

  return function clone(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _default = clone;
exports.default = _default;