"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _fs() {
  const data = require("fs");

  _fs = function _fs() {
    return data;
  };

  return data;
}

var _Block = _interopRequireDefault(require("./core/Block"));

var _util = require("./util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = api => {
  // 区块资源可扩展
  let resources = [];
  api.onUISocket( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* ({
      action,
      failure,
      success,
      send
    }) {
      if (!resources.length) {
        resources = api.applyPlugins('addBlockUIResource', {
          initialValue: _util.DEFAULT_RESOURCES
        });
        resources = api.applyPlugins('modifyBlockUIResources', {
          initialValue: resources
        });
      }

      const blockService = new _Block.default(api);
      blockService.init(send);
      const type = action.type,
            _action$payload = action.payload,
            payload = _action$payload === void 0 ? {} : _action$payload,
            lang = action.lang;
      const dir = (0, _path().join)(__dirname, 'socketHandlers');
      const files = (0, _fs().readdirSync)(dir).filter(f => f.charAt(0) !== '.').map(f => f.replace(/\.(js|ts)$/, ''));

      if (files.includes(type)) {
        try {
          const fn = require((0, _path().join)(dir, type)).default;

          yield fn({
            api,
            success,
            failure,
            send,
            payload,
            lang,
            blockService,
            resources
          });
        } catch (e) {
          console.error(e);
          failure({
            message: e.message,
            success: false
          });
        }
      }
    });

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
};

exports.default = _default;