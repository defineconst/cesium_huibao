"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _assert() {
  const data = _interopRequireDefault(require("assert"));

  _assert = function _assert() {
    return data;
  };

  return data;
}

function _fs() {
  const data = require("fs");

  _fs = function _fs() {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function _path() {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function getHistoryConfig(val) {
  return Array.isArray(val) ? val : [val];
}

function _default(api) {
  const _api$service = api.service,
        config = _api$service.config,
        paths = _api$service.paths;

  api._registerConfig(() => {
    return api => {
      return {
        name: 'history',

        validate(val) {
          const _getHistoryConfig = getHistoryConfig(val),
                _getHistoryConfig2 = _slicedToArray(_getHistoryConfig, 1),
                historyType = _getHistoryConfig2[0];

          (0, _assert().default)(['browser', 'hash', 'memory'].includes(historyType), `history should be browser or hash, but got ${historyType}`);
        },

        onChange() {
          // regenerate dll file
          const filesInfoFile = (0, _path().join)(paths.absNodeModulesPath, 'umi-dlls', 'filesInfo.json');

          if ((0, _fs().existsSync)(filesInfoFile)) {
            (0, _fs().unlinkSync)(filesInfoFile);
          }

          api.service.restart(
          /* why */
          'Config history Changed');
        },

        default: 'browser',
        group: 'route',
        title: {
          'zh-CN': 'History 类型',
          'en-US': 'History Type'
        },
        type: 'list',
        choices: ['browser', 'hash', 'memory'],
        description: {
          'zh-CN': 'History 类型，可选 browser、hash 和 memory。',
          'en-US': 'The history type, including browser, hash and memory.'
        }
      };
    };
  });

  api.modifyEntryHistory(memo => {
    const _getHistoryConfig3 = getHistoryConfig(config.history),
          _getHistoryConfig4 = _slicedToArray(_getHistoryConfig3, 2),
          historyType = _getHistoryConfig4[0],
          opts = _getHistoryConfig4[1];

    if (historyType === 'hash') {
      const hashOpts = JSON.stringify(_objectSpread({
        basename: config.base || '/'
      }, opts) || {});
      return `require('history/createHashHistory').default(${hashOpts})`;
    } else if (historyType === 'memory') {
      return `require('history/createMemoryHistory').default({ initialEntries: window.g_initialEntries })`;
    }

    return memo;
  });
  api.addHTMLHeadScript((memo, {
    route
  }) => {
    return config.history === 'memory' ? [{
      content: `window.g_initialEntries = ['${route.path}'];`
    }] : [];
  });
}